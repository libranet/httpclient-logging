# This is a comment.
# syntax-documentation:
#  - https://docs.astral.sh/uv/concepts/projects/#project-metadata
#  - https://python-poetry.org/docs/pyproject
#  - https://flit.readthedocs.io/en/latest/pyproject_toml.html
#
# NOTE: you have to use single-quoted strings in TOML for regular expressions.
# It's the equivalent of r-strings in Python.  Multiline strings are treated as
# verbose regular expressions by Black.  Use [ ] to denote a significant space
# character.
#
# Usage with uv:
#   > uv sync --all-groups


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[project]
name = "httpclient_logging"
version = "1.1"
requires-python = ">=3.10"
description = " python-package"
readme = "docs/readme.md"
# license = "MIT"
license = { file = "license.md" }
authors = [{name = "Wouter Vanden Hove", email = "wouter@libranet.eu"}]
maintainers = [{name = "Wouter Vanden Hove", email = "wouter@libranet.eu"}]
keywords = ["entrypoints", "sitecustomize", "httpclient", "logging"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: Implementation :: CPython",
    "Typing :: Typed",
]
dependencies = [
    "sitecustomize-entrypoints == 1.1.0",
]

[project.urls]
Docs = "https://httpclient-logging.readthedocs.io"
Pypi = "https://pypi.org/project/httpclient-logging"
Repo = "https://github.com/libranet/httpclient-logging"
Issues = "https://github.com/libranet/httpclient-logging/issues"
Changelog = "https://github.com/libranet/httpclient-logging/releases"

[dependency-groups]
dev = [
    "autoread-dotenv >= 1.0",
    "libranet-logging >= 1.0",
    ]
docs = [
    "autoapi >= 2.0.1",
    "recommonmark >= 0.7.1",
    "sphinx >= 7.1.2",
    "sphinx-rtd-theme >= 3.0.1",
    "sphinx-autoapi >= 3.3.3",
    ]
ipython = [
    "ipdb >= 0.13.13",
    "ipython >= 8.12.3",
    ]
linting = [
    "pre-commit >= 3.5.0",
    "pre-commit-hooks >= 5.0.0",
    "pylint >= 3.2.7",
    "ruff >= 0.7.2",
    ]
profiling = [
    "importtime-waterfall >= 1.0.0",
    "tuna >= 0.5.11",
    ]
releasing = [
    "pyroma>=4.0",
]
security = [
    "bandit >= 0.0",
    ]
testing = [
    "freezegun>=1.5.1",
    "pytest >= 8.3.3",
    "pytest-cov >= 5.0.0",
    "pytest-freezer >= 0.4.8",
    "pytest-mock >= 3.14.0",
]
typing = [
    "lxml >=4.9",
    "mypy >= 1.13.0",
    ]


# https://packaging.python.org/en/latest/guides/creating-and-discovering-plugins/
# https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#advanced-plugins
# https://github.com/Darsstar/sitecustomize-entrypoints/blob/main/src/sitecustomize/__init__.py
[project.entry-points."sitecustomize"]
httpclient_logging = "httpclient_logging.patch:configure"


[tool.coverage.html]
directory = "var/coverage/html"

[tool.coverage.xml]
output = "var/coverage/coverage.xml"


[tool.coverage.report]
# cfr. https://coverage.readthedocs.io/en/coverage-4.2/excluding.html
exclude_lines = [
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]
include = ["src/*"]

[tool.coverage.run]
branch = true
data_file = "var/coverage/coverage.db" # defaults to .coverage


[tool.mypy]
# cfr https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml-file
cache_dir = "var/cache/mypy"
check_untyped_defs = true
# disallow_untyped_defs = true
exclude = "^bin/"
ignore_missing_imports = true


[tool.pylint.format]
max-line-length = 120
good-names = [
    "i",  # counter in loop
    "ok", # status
    "ts", # timestamp or timeseries object
]

[tool.pylint.messages_control]
disable = [
    "C0116", # missing-function-docstring
]

[tool.pytest.ini_options]
cache_dir = "var/cache/pytest"
log_cli = false                   # enable to show log-output
log_cli_level = "NOTSET"
filterwarnings = []
markers = ["unit", "integration"]
testpaths = ["tests"]
# the junit-report is used to report coverage in gitlab
addopts = "--junit-xml='var/coverage/pytest.xml' --cov --cov-append "


[tool.ruff]
# https://beta.ruff.rs/docs/configuration/
# https://github.com/pandas-dev/pandas/blob/main/pyproject.toml
cache-dir = "var/cache/ruff"
line-length = 120
target-version = "py312"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "B011",   # Do not call assert False since python -O removes these calls.
    "ERA001", # Found commented-out code
    "G004",   # Logging statement uses f-string
    "RET504", # Unnecessary assignment before `return` statement

    # D212 conflicts with D213 - we prefer D212, so we ignore D213
    "D213",  # Multi-line docstring summary should start at the second line
    # D211 conflicts with D203 - we prefer D211, so we ignore D203
    "D203", # 1 blank line required before class docstring
]

[tool.ruff.lint.per-file-ignores]
"docs/**" = [
        "INP001", # docs-dir should not be a python-package
]
"tests/**" = [
    "ANN",    # Missing type annotations
    "ARG001", # Unused function argument
    # "ARG002", # Unused method argument
    "D",      # Missing docstring
    # "E501",   # Line too long
    "INP001", # tests-dir should not be a python-package
    # "NPY002", # TODO Replace legacy `np.random.rand` call with `np.random.Generator`
    # "SLF001", # Private member accessed
    "S101",   # Use of `assert` detected
    ]


[tool.uv]
package = true
default-groups = [
    # "dev",
    "docs",
    "ipython",
    "linting",
    # "profiling",
    "releasing",
    "testing",
    "typing",
    # "security",
    ]
